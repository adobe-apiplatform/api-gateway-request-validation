---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by vdatcu.
--- DateTime: 05/07/2018 11:04
---

local CLASS_UNDER_TEST = 'api-gateway.redis.redisHealthCheck'

local ngxUpstreamMock, ngxSocketMock, shared

beforeEach(function()
    ngxUpstreamMock = mock('ngx.upstream', { 'get_primary_peers', 'get_backup_peers' })
    ngxSocketMock = mock('ngx.socket.tcp', { 'connect', 'receive', 'send', 'close', 'settimeout' })
    ngx.socket = {
        tcp = function()
            return ngxSocketMock
        end
    }

    shared = mock("ngx.shared", { "safe_set", "delete", "get" })
    ngx.shared = {
        cachedOauthTokens = shared
    }
end)

test('Successful flow with no password, should return one healthy host', function()
    local classUnderTest = require(CLASS_UNDER_TEST):new()
    ngxUpstreamMock.__get_primary_peers.doReturn = function()
        local primaryPeers = {}
        table.insert(primaryPeers, { name = "127.0.0.1:6379" })
        return primaryPeers, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return {}, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return true, nil
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', '')
    assertNotNil(healthyHost)
    assertNotNil(host)
    assertNotNil(port)
    assertEquals('127.0.0.1', host)
    assertEquals('6379', tostring(port))
end)

test('Successful flow with password, should return one healthy host', function()
    local classUnderTest = require(CLASS_UNDER_TEST):new()
    ngxUpstreamMock.__get_primary_peers.doReturn = function()
        local primaryPeers = {}
        table.insert(primaryPeers, { name = "127.0.0.1:6379" })
        return primaryPeers, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return {}, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return true, nil
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNotNil(healthyHost)
    assertNotNil(host)
    assertNotNil(port)
    assertEquals('127.0.0.1', host)
    assertEquals('6379', tostring(port))
end)

test('Faulty flow with wrong password, should not return any host', function()
    ngx.var["enable_redis_advanced_healthcheck"] = "true"
    local classUnderTest = require(CLASS_UNDER_TEST):new()
    ngxUpstreamMock.__get_primary_peers.doReturn = function()
        local primaryPeers = {}
        table.insert(primaryPeers, { name = "127.0.0.1:6379" })
        return primaryPeers, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return {}, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return true, nil
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'ERROR', 'ERROR', nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNil(healthyHost)
    assertNil(host)
    assertNil(port)
end)

test('Backup peers successful flow with password, should return one healthy host', function()
    local classUnderTest = require(CLASS_UNDER_TEST):new()
    ngxUpstreamMock.__get_primary_peers.doReturn = function()
        return {}, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        local secondaryPeers = {}
        table.insert(secondaryPeers, { name = "127.0.0.1:6379" })
        return secondaryPeers, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return true, nil
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNotNil(healthyHost)
    assertNotNil(host)
    assertNotNil(port)
    assertEquals('127.0.0.1', host)
    assertEquals('6379', tostring(port))
end)

test('Multiple peers successful flow with password, should return first healthy host', function()
    ngx.var["enable_redis_advanced_healthcheck"] = "true"
    local classUnderTest = require(CLASS_UNDER_TEST):new()

    local primaryPeers = {
        {
            name = "127.0.0.2:7000"
        },
        {
            name = "127.0.0.1.6379"
        }
    }
    ngxUpstreamMock.__get_primary_peers.doReturn = function()

        return primaryPeers, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return {}, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return true, nil
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNotNil(healthyHost)
    assertNotNil(host)
    assertNotNil(port)
    assertEquals(primaryPeers[1].name, healthyHost)
    assertEquals('127.0.0.2', host)
    assertEquals('7000', tostring(port))
end)

test('No tcp connection should fail', function()
    ngx.var["enable_redis_advanced_healthcheck"] = "true"
    local classUnderTest = require(CLASS_UNDER_TEST):new()

    local primaryPeers = {
        {
            name = "127.0.0.2:7000"
        },
        {
            name = "127.0.0.1.6379"
        }
    }
    ngxUpstreamMock.__get_primary_peers.doReturn = function()

        return primaryPeers, nil
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return {}, nil
    end

    ngxSocketMock.__connect.doReturn = function()
        return false, {}
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNil(healthyHost)
    assertNil(host)
    assertNil(port)
end)

test('Primary and backup peers error should fail', function()
    local classUnderTest = require(CLASS_UNDER_TEST):new()

    ngxUpstreamMock.__get_primary_peers.doReturn = function()

        return nil, 'ERROR'
    end

    ngxUpstreamMock.__get_backup_peers.doReturn = function()
        return nil, 'ERROR'
    end

    ngxSocketMock.__connect.doReturn = function()
        return false, {}
    end

    ngxSocketMock.__settimeout.doReturn = function()
        return true
    end

    ngxSocketMock.__send.doReturn = function(self, message)

        if string.match(message, 'AUTH') then
            ngxSocketMock.__receive.doReturn = function()
                return 'OK', nil, nil
            end
        end

        if string.match(message, 'PING') then
            ngxSocketMock.__receive.doReturn = function()
                return 'PONG', nil, nil
            end
        end

        return 0, nil
    end

    local healthyHost, host, port = classUnderTest:getHealthyRedisNode('api-gateway-read-replica', 'password')
    assertNil(healthyHost)
    assertNil(host)
    assertNil(port)
end)

